use super::{EncoderTrait, InstructionData, OperandType};

macro_rules! id {
    ($operation:ident, $op_code:literal, $destination:ident, $source:ident, $encoder:ident) => {{
        InstructionData {
            operation: Operation::$operation,
            op_code: $op_code,
            destination: OperandType::$destination,
            source: OperandType::$source,
            encoder: super::$encoder::encode,
            sizer: super::$encoder::size,
        }
    }};
}

#[rustfmt::skip]
pub const DATA: &[InstructionData] = &[
    id!(Aaa, 0x00, none, none, none_and_none),
    id!(Aad, 0x00, none, none, none_and_none),
    id!(Aad, 0x00, imm, none, imm_and_none),
    id!(Aam, 0x00, none, none, none_and_none),
    id!(Aam, 0x00, imm, none, imm_and_none),
    id!(Aas, 0x00, none, none, none_and_none),
    id!(Adc, 0x00, mem, reg8, mem_and_reg8),
    id!(Adc, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Adc, 0x00, mem, reg16, mem_and_reg16),
    id!(Adc, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Adc, 0x00, reg8, mem, reg8_and_mem),
    id!(Adc, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Adc, 0x00, reg16, mem, reg16_and_mem),
    id!(Adc, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Adc, 0x00, rm16, imm8, rm16_and_imm8),
    id!(Adc, 0x00, al, imm, al_and_imm),
    id!(Adc, 0x00, ax, sbyteword, ax_and_sbyteword),
    id!(Adc, 0x00, ax, imm, ax_and_imm),
    id!(Adc, 0x00, rm8, imm, rm8_and_imm),
    id!(Adc, 0x00, rm16, sbyteword, rm16_and_sbyteword),
    id!(Adc, 0x00, rm16, imm, rm16_and_imm),
    id!(Adc, 0x00, mem, imm8, mem_and_imm8),
    id!(Adc, 0x00, mem, sbyteword16, mem_and_sbyteword16),
    id!(Adc, 0x00, mem, imm16, mem_and_imm16),
    id!(Adc, 0x00, rm8, imm, rm8_and_imm),
    id!(Add, 0x00, mem, reg8, mem_and_reg8),
    id!(Add, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Add, 0x00, mem, reg16, mem_and_reg16),
    id!(Add, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Add, 0x00, reg8, mem, reg8_and_mem),
    id!(Add, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Add, 0x00, reg16, mem, reg16_and_mem),
    id!(Add, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Add, 0x00, rm16, imm8, rm16_and_imm8),
    id!(Add, 0x00, al, imm, al_and_imm),
    id!(Add, 0x00, ax, sbyteword, ax_and_sbyteword),
    id!(Add, 0x00, ax, imm, ax_and_imm),
    id!(Add, 0x00, rm8, imm, rm8_and_imm),
    id!(Add, 0x00, rm16, sbyteword, rm16_and_sbyteword),
    id!(Add, 0x00, rm16, imm, rm16_and_imm),
    id!(Add, 0x00, mem, imm8, mem_and_imm8),
    id!(Add, 0x00, mem, sbyteword16, mem_and_sbyteword16),
    id!(Add, 0x00, mem, imm16, mem_and_imm16),
    id!(Add, 0x00, rm8, imm, rm8_and_imm),
    id!(And, 0x00, mem, reg8, mem_and_reg8),
    id!(And, 0x00, reg8, reg8, reg8_and_reg8),
    id!(And, 0x00, mem, reg16, mem_and_reg16),
    id!(And, 0x00, reg16, reg16, reg16_and_reg16),
    id!(And, 0x00, reg8, mem, reg8_and_mem),
    id!(And, 0x00, reg8, reg8, reg8_and_reg8),
    id!(And, 0x00, reg16, mem, reg16_and_mem),
    id!(And, 0x00, reg16, reg16, reg16_and_reg16),
    id!(And, 0x00, rm16, imm8, rm16_and_imm8),
    id!(And, 0x00, al, imm, al_and_imm),
    id!(And, 0x00, ax, sbyteword, ax_and_sbyteword),
    id!(And, 0x00, ax, imm, ax_and_imm),
    id!(And, 0x00, rm8, imm, rm8_and_imm),
    id!(And, 0x00, rm16, sbyteword, rm16_and_sbyteword),
    id!(And, 0x00, rm16, imm, rm16_and_imm),
    id!(And, 0x00, mem, imm8, mem_and_imm8),
    id!(And, 0x00, mem, sbyteword16, mem_and_sbyteword16),
    id!(And, 0x00, mem, imm16, mem_and_imm16),
    id!(And, 0x00, rm8, imm, rm8_and_imm),
    id!(Call, 0x00, imm, none, imm_and_none),
    id!(Call, 0x00, imm, none, imm_and_none),
    id!(Call, 0x00, imm, none, imm_and_none),
    id!(Call, 0x00, imm16, none, imm16_and_none),
    id!(Call, 0x00, imm16, none, imm16_and_none),
    id!(Call, 0x00, imm16, none, imm16_and_none),
    id!(Call, 0x00, seg_off, none, seg_off_and_none),
    id!(Call, 0x00, seg_off, none, seg_off_and_none),
    id!(Call, 0x00, seg_off, none, seg_off_and_none),
    id!(Call, 0x00, mem, none, mem_and_none),
    id!(Call, 0x00, mem16, none, mem16_and_none),
    id!(Call, 0x00, mem, none, mem_and_none),
    id!(Call, 0x00, rm16, none, rm16_and_none),
    id!(Call, 0x00, mem, none, mem_and_none),
    id!(Call, 0x00, rm16, none, rm16_and_none),
    id!(Cbw, 0x00, none, none, none_and_none),
    id!(Clc, 0x00, none, none, none_and_none),
    id!(Cld, 0x00, none, none, none_and_none),
    id!(Cli, 0x00, none, none, none_and_none),
    id!(Cmc, 0x00, none, none, none_and_none),
    id!(Cmp, 0x00, mem, reg8, mem_and_reg8),
    id!(Cmp, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Cmp, 0x00, mem, reg16, mem_and_reg16),
    id!(Cmp, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Cmp, 0x00, reg8, mem, reg8_and_mem),
    id!(Cmp, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Cmp, 0x00, reg16, mem, reg16_and_mem),
    id!(Cmp, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Cmp, 0x00, rm16, imm8, rm16_and_imm8),
    id!(Cmp, 0x00, al, imm, al_and_imm),
    id!(Cmp, 0x00, ax, sbyteword, ax_and_sbyteword),
    id!(Cmp, 0x00, ax, imm, ax_and_imm),
    id!(Cmp, 0x00, rm8, imm, rm8_and_imm),
    id!(Cmp, 0x00, rm16, sbyteword, rm16_and_sbyteword),
    id!(Cmp, 0x00, rm16, imm, rm16_and_imm),
    id!(Cmp, 0x00, mem, imm8, mem_and_imm8),
    id!(Cmp, 0x00, mem, sbyteword16, mem_and_sbyteword16),
    id!(Cmp, 0x00, mem, imm16, mem_and_imm16),
    id!(Cmp, 0x00, rm8, imm, rm8_and_imm),
    id!(Cmpsb, 0x00, none, none, none_and_none),
    id!(Cmpsw, 0x00, none, none, none_and_none),
    id!(Cwd, 0x00, none, none, none_and_none),
    id!(Daa, 0x00, none, none, none_and_none),
    id!(Das, 0x00, none, none, none_and_none),
    id!(Dec, 0x00, reg16, none, reg16_and_none),
    id!(Dec, 0x00, rm8, none, rm8_and_none),
    id!(Dec, 0x00, rm16, none, rm16_and_none),
    id!(Div, 0x00, rm8, none, rm8_and_none),
    id!(Div, 0x00, rm16, none, rm16_and_none),
    id!(Hlt, 0x00, none, none, none_and_none),
    id!(Idiv, 0x00, rm8, none, rm8_and_none),
    id!(Idiv, 0x00, rm16, none, rm16_and_none),
    id!(Imul, 0x00, rm8, none, rm8_and_none),
    id!(Imul, 0x00, rm16, none, rm16_and_none),
    id!(In, 0x00, al, imm, al_and_imm),
    id!(In, 0x00, ax, imm, ax_and_imm),
    id!(In, 0x00, al, dx, al_and_dx),
    id!(In, 0x00, ax, dx, ax_and_dx),
    id!(Inc, 0x00, reg16, none, reg16_and_none),
    id!(Inc, 0x00, rm8, none, rm8_and_none),
    id!(Inc, 0x00, rm16, none, rm16_and_none),
    id!(Int, 0x00, imm, none, imm_and_none),
    id!(Int03, 0x00, none, none, none_and_none),
    id!(Int3, 0x00, none, none, none_and_none),
    id!(Into, 0x00, none, none, none_and_none),
    id!(Iret, 0x00, none, none, none_and_none),
    id!(Iretw, 0x00, none, none, none_and_none),
    id!(Jcxz, 0x00, imm, none, imm_and_none),
    id!(Jmp, 0x00, imm, none, imm_and_none),
    id!(Jmp, 0x00, imm, none, imm_and_none),
    id!(Jmp, 0x00, imm, none, imm_and_none),
    id!(Jmp, 0x00, imm, none, imm_and_none),
    id!(Jmp, 0x00, imm, none, imm_and_none),
    id!(Jmp, 0x00, imm16, none, imm16_and_none),
    id!(Jmp, 0x00, imm16, none, imm16_and_none),
    id!(Jmp, 0x00, imm16, none, imm16_and_none),
    id!(Jmp, 0x00, seg_off, none, seg_off_and_none),
    id!(Jmp, 0x00, seg_off, none, seg_off_and_none),
    id!(Jmp, 0x00, seg_off, none, seg_off_and_none),
    id!(Jmp, 0x00, mem, none, mem_and_none),
    id!(Jmp, 0x00, mem16, none, mem16_and_none),
    id!(Jmp, 0x00, mem, none, mem_and_none),
    id!(Jmp, 0x00, rm16, none, rm16_and_none),
    id!(Jmp, 0x00, mem, none, mem_and_none),
    id!(Jmp, 0x00, rm16, none, rm16_and_none),
    id!(Lahf, 0x00, none, none, none_and_none),
    id!(Lds, 0x00, reg16, mem, reg16_and_mem),
    id!(Lea, 0x00, reg16, mem, reg16_and_mem),
    id!(Lea, 0x00, reg16, imm, reg16_and_imm),
    id!(Les, 0x00, reg16, mem, reg16_and_mem),
    id!(Lodsb, 0x00, none, none, none_and_none),
    id!(Lodsw, 0x00, none, none, none_and_none),
    id!(Loop, 0x00, imm, none, imm_and_none),
    id!(Loop, 0x00, imm, cx, imm_and_cx),
    id!(Loope, 0x00, imm, none, imm_and_none),
    id!(Loope, 0x00, imm, cx, imm_and_cx),
    id!(Loopne, 0x00, imm, none, imm_and_none),
    id!(Loopne, 0x00, imm, cx, imm_and_cx),
    id!(Loopnz, 0x00, imm, none, imm_and_none),
    id!(Loopnz, 0x00, imm, cx, imm_and_cx),
    id!(Loopz, 0x00, imm, none, imm_and_none),
    id!(Loopz, 0x00, imm, cx, imm_and_cx),
    id!(Mov, 0x00, mem, seg, mem_and_seg),
    id!(Mov, 0x00, reg16, seg, reg16_and_seg),
    id!(Mov, 0x00, seg, mem, seg_and_mem),
    id!(Mov, 0x00, seg, reg16, seg_and_reg16),
    id!(Mov, 0x00, seg, reg16, seg_and_reg16),
    id!(Mov, 0x00, al, mem, al_and_mem),
    id!(Mov, 0x00, ax, mem, ax_and_mem),
    id!(Mov, 0x00, mem, al, mem_and_al),
    id!(Mov, 0x00, mem, ax, mem_and_ax),
    id!(Mov, 0x00, mem, reg8, mem_and_reg8),
    id!(Mov, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Mov, 0x00, mem, reg16, mem_and_reg16),
    id!(Mov, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Mov, 0x00, reg8, mem, reg8_and_mem),
    id!(Mov, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Mov, 0x00, reg16, mem, reg16_and_mem),
    id!(Mov, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Mov, 0x00, reg8, imm, reg8_and_imm),
    id!(Mov, 0x00, reg16, imm, reg16_and_imm),
    id!(Mov, 0x00, rm8, imm, rm8_and_imm),
    id!(Mov, 0x00, rm16, imm, rm16_and_imm),
    id!(Mov, 0x00, mem, imm8, mem_and_imm8),
    id!(Mov, 0x00, mem, imm16, mem_and_imm16),
    id!(Movsb, 0x00, none, none, none_and_none),
    id!(Movsw, 0x00, none, none, none_and_none),
    id!(Mul, 0x00, rm8, none, rm8_and_none),
    id!(Mul, 0x00, rm16, none, rm16_and_none),
    id!(Neg, 0x00, rm8, none, rm8_and_none),
    id!(Neg, 0x00, rm16, none, rm16_and_none),
    id!(Nop, 0x00, none, none, none_and_none),
    id!(Not, 0x00, rm8, none, rm8_and_none),
    id!(Not, 0x00, rm16, none, rm16_and_none),
    id!(Or, 0x00, mem, reg8, mem_and_reg8),
    id!(Or, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Or, 0x00, mem, reg16, mem_and_reg16),
    id!(Or, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Or, 0x00, reg8, mem, reg8_and_mem),
    id!(Or, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Or, 0x00, reg16, mem, reg16_and_mem),
    id!(Or, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Or, 0x00, rm16, imm8, rm16_and_imm8),
    id!(Or, 0x00, al, imm, al_and_imm),
    id!(Or, 0x00, ax, sbyteword, ax_and_sbyteword),
    id!(Or, 0x00, ax, imm, ax_and_imm),
    id!(Or, 0x00, rm8, imm, rm8_and_imm),
    id!(Or, 0x00, rm16, sbyteword, rm16_and_sbyteword),
    id!(Or, 0x00, rm16, imm, rm16_and_imm),
    id!(Or, 0x00, mem, imm8, mem_and_imm8),
    id!(Or, 0x00, mem, sbyteword16, mem_and_sbyteword16),
    id!(Or, 0x00, mem, imm16, mem_and_imm16),
    id!(Or, 0x00, rm8, imm, rm8_and_imm),
    id!(Out, 0x00, imm, al, imm_and_al),
    id!(Out, 0x00, imm, ax, imm_and_ax),
    id!(Out, 0x00, dx, al, dx_and_al),
    id!(Out, 0x00, dx, ax, dx_and_ax),
    id!(Pause, 0x00, none, none, none_and_none),
    id!(Pop, 0x00, reg16, none, reg16_and_none),
    id!(Pop, 0x00, rm16, none, rm16_and_none),
    id!(Pop, 0x00, es, none, es_and_none),
    id!(Pop, 0x00, cs, none, cs_and_none),
    id!(Pop, 0x00, ss, none, ss_and_none),
    id!(Pop, 0x00, ds, none, ds_and_none),
    id!(Popf, 0x00, none, none, none_and_none),
    id!(Popfw, 0x00, none, none, none_and_none),
    id!(Push, 0x00, reg16, none, reg16_and_none),
    id!(Push, 0x00, rm16, none, rm16_and_none),
    id!(Push, 0x00, es, none, es_and_none),
    id!(Push, 0x00, cs, none, cs_and_none),
    id!(Push, 0x00, ss, none, ss_and_none),
    id!(Push, 0x00, ds, none, ds_and_none),
    id!(Pushf, 0x00, none, none, none_and_none),
    id!(Pushfw, 0x00, none, none, none_and_none),
    id!(Rcl, 0x00, rm8, one, rm8_and_one),
    id!(Rcl, 0x00, rm8, cl, rm8_and_cl),
    id!(Rcl, 0x00, rm16, one, rm16_and_one),
    id!(Rcl, 0x00, rm16, cl, rm16_and_cl),
    id!(Rcr, 0x00, rm8, one, rm8_and_one),
    id!(Rcr, 0x00, rm8, cl, rm8_and_cl),
    id!(Rcr, 0x00, rm16, one, rm16_and_one),
    id!(Rcr, 0x00, rm16, cl, rm16_and_cl),
    id!(Ret, 0x00, none, none, none_and_none),
    id!(Ret, 0x00, imm, none, imm_and_none),
    id!(Retf, 0x00, none, none, none_and_none),
    id!(Retf, 0x00, imm, none, imm_and_none),
    id!(Retn, 0x00, none, none, none_and_none),
    id!(Retn, 0x00, imm, none, imm_and_none),
    id!(Retw, 0x00, none, none, none_and_none),
    id!(Retw, 0x00, imm, none, imm_and_none),
    id!(Retfw, 0x00, none, none, none_and_none),
    id!(Retfw, 0x00, imm, none, imm_and_none),
    id!(Retnw, 0x00, none, none, none_and_none),
    id!(Retnw, 0x00, imm, none, imm_and_none),
    id!(Retd, 0x00, none, none, none_and_none),
    id!(Retd, 0x00, imm, none, imm_and_none),
    id!(Retfd, 0x00, none, none, none_and_none),
    id!(Retfd, 0x00, imm, none, imm_and_none),
    id!(Retnd, 0x00, none, none, none_and_none),
    id!(Retnd, 0x00, imm, none, imm_and_none),
    id!(Rol, 0x00, rm8, one, rm8_and_one),
    id!(Rol, 0x00, rm8, cl, rm8_and_cl),
    id!(Rol, 0x00, rm16, one, rm16_and_one),
    id!(Rol, 0x00, rm16, cl, rm16_and_cl),
    id!(Ror, 0x00, rm8, one, rm8_and_one),
    id!(Ror, 0x00, rm8, cl, rm8_and_cl),
    id!(Ror, 0x00, rm16, one, rm16_and_one),
    id!(Ror, 0x00, rm16, cl, rm16_and_cl),
    id!(Sahf, 0x00, none, none, none_and_none),
    id!(Sal, 0x00, rm8, one, rm8_and_one),
    id!(Sal, 0x00, rm8, cl, rm8_and_cl),
    id!(Sal, 0x00, rm16, one, rm16_and_one),
    id!(Sal, 0x00, rm16, cl, rm16_and_cl),
    id!(Salc, 0x00, none, none, none_and_none),
    id!(Sar, 0x00, rm8, one, rm8_and_one),
    id!(Sar, 0x00, rm8, cl, rm8_and_cl),
    id!(Sar, 0x00, rm16, one, rm16_and_one),
    id!(Sar, 0x00, rm16, cl, rm16_and_cl),
    id!(Sbb, 0x00, mem, reg8, mem_and_reg8),
    id!(Sbb, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Sbb, 0x00, mem, reg16, mem_and_reg16),
    id!(Sbb, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Sbb, 0x00, reg8, mem, reg8_and_mem),
    id!(Sbb, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Sbb, 0x00, reg16, mem, reg16_and_mem),
    id!(Sbb, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Sbb, 0x00, rm16, imm8, rm16_and_imm8),
    id!(Sbb, 0x00, al, imm, al_and_imm),
    id!(Sbb, 0x00, ax, sbyteword, ax_and_sbyteword),
    id!(Sbb, 0x00, ax, imm, ax_and_imm),
    id!(Sbb, 0x00, rm8, imm, rm8_and_imm),
    id!(Sbb, 0x00, rm16, sbyteword, rm16_and_sbyteword),
    id!(Sbb, 0x00, rm16, imm, rm16_and_imm),
    id!(Sbb, 0x00, mem, imm8, mem_and_imm8),
    id!(Sbb, 0x00, mem, sbyteword16, mem_and_sbyteword16),
    id!(Sbb, 0x00, mem, imm16, mem_and_imm16),
    id!(Sbb, 0x00, rm8, imm, rm8_and_imm),
    id!(Scasb, 0x00, none, none, none_and_none),
    id!(Scasw, 0x00, none, none, none_and_none),
    id!(Shl, 0x00, rm8, one, rm8_and_one),
    id!(Shl, 0x00, rm8, cl, rm8_and_cl),
    id!(Shl, 0x00, rm16, one, rm16_and_one),
    id!(Shl, 0x00, rm16, cl, rm16_and_cl),
    id!(Shr, 0x00, rm8, one, rm8_and_one),
    id!(Shr, 0x00, rm8, cl, rm8_and_cl),
    id!(Shr, 0x00, rm16, one, rm16_and_one),
    id!(Shr, 0x00, rm16, cl, rm16_and_cl),
    id!(Stc, 0x00, none, none, none_and_none),
    id!(Std, 0x00, none, none, none_and_none),
    id!(Sti, 0x00, none, none, none_and_none),
    id!(Stosb, 0x00, none, none, none_and_none),
    id!(Stosw, 0x00, none, none, none_and_none),
    id!(Sub, 0x00, mem, reg8, mem_and_reg8),
    id!(Sub, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Sub, 0x00, mem, reg16, mem_and_reg16),
    id!(Sub, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Sub, 0x00, reg8, mem, reg8_and_mem),
    id!(Sub, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Sub, 0x00, reg16, mem, reg16_and_mem),
    id!(Sub, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Sub, 0x00, rm16, imm8, rm16_and_imm8),
    id!(Sub, 0x00, al, imm, al_and_imm),
    id!(Sub, 0x00, ax, sbyteword, ax_and_sbyteword),
    id!(Sub, 0x00, ax, imm, ax_and_imm),
    id!(Sub, 0x00, rm8, imm, rm8_and_imm),
    id!(Sub, 0x00, rm16, sbyteword, rm16_and_sbyteword),
    id!(Sub, 0x00, rm16, imm, rm16_and_imm),
    id!(Sub, 0x00, mem, imm8, mem_and_imm8),
    id!(Sub, 0x00, mem, sbyteword16, mem_and_sbyteword16),
    id!(Sub, 0x00, mem, imm16, mem_and_imm16),
    id!(Sub, 0x00, rm8, imm, rm8_and_imm),
    id!(Test, 0x00, mem, reg8, mem_and_reg8),
    id!(Test, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Test, 0x00, mem, reg16, mem_and_reg16),
    id!(Test, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Test, 0x00, reg8, mem, reg8_and_mem),
    id!(Test, 0x00, reg16, mem, reg16_and_mem),
    id!(Test, 0x00, al, imm, al_and_imm),
    id!(Test, 0x00, ax, imm, ax_and_imm),
    id!(Test, 0x00, rm8, imm, rm8_and_imm),
    id!(Test, 0x00, rm16, imm, rm16_and_imm),
    id!(Test, 0x00, mem, imm8, mem_and_imm8),
    id!(Test, 0x00, mem, imm16, mem_and_imm16),
    id!(Fwait, 0x00, none, none, none_and_none),
    id!(Xchg, 0x00, ax, reg16, ax_and_reg16),
    id!(Xchg, 0x00, reg16, ax, reg16_and_ax),
    id!(Xchg, 0x00, reg8, mem, reg8_and_mem),
    id!(Xchg, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Xchg, 0x00, reg16, mem, reg16_and_mem),
    id!(Xchg, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Xchg, 0x00, mem, reg8, mem_and_reg8),
    id!(Xchg, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Xchg, 0x00, mem, reg16, mem_and_reg16),
    id!(Xchg, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Xlatb, 0x00, none, none, none_and_none),
    id!(Xlat, 0x00, none, none, none_and_none),
    id!(Xor, 0x00, mem, reg8, mem_and_reg8),
    id!(Xor, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Xor, 0x00, mem, reg16, mem_and_reg16),
    id!(Xor, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Xor, 0x00, reg8, mem, reg8_and_mem),
    id!(Xor, 0x00, reg8, reg8, reg8_and_reg8),
    id!(Xor, 0x00, reg16, mem, reg16_and_mem),
    id!(Xor, 0x00, reg16, reg16, reg16_and_reg16),
    id!(Xor, 0x00, rm16, imm8, rm16_and_imm8),
    id!(Xor, 0x00, al, imm, al_and_imm),
    id!(Xor, 0x00, ax, sbyteword, ax_and_sbyteword),
    id!(Xor, 0x00, ax, imm, ax_and_imm),
    id!(Xor, 0x00, rm8, imm, rm8_and_imm),
    id!(Xor, 0x00, rm16, sbyteword, rm16_and_sbyteword),
    id!(Xor, 0x00, rm16, imm, rm16_and_imm),
    id!(Xor, 0x00, mem, imm8, mem_and_imm8),
    id!(Xor, 0x00, mem, sbyteword16, mem_and_sbyteword16),
    id!(Xor, 0x00, mem, imm16, mem_and_imm16),
    id!(Xor, 0x00, rm8, imm, rm8_and_imm),
];

#[derive(Debug, Eq, PartialEq)]
#[repr(u8)]
pub enum Operation {
    Aaa,
    Aad,
    Aam,
    Aas,
    Adc,
    Add,
    And,
    Call,
    Cbw,
    Clc,
    Cld,
    Cli,
    Cmc,
    Cmp,
    Cmpsb,
    Cmpsw,
    Cwd,
    Daa,
    Das,
    Dec,
    Div,
    Fwait,
    Hlt,
    Idiv,
    Imul,
    In,
    Inc,
    Int,
    Int03,
    Int3,
    Into,
    Iret,
    Iretw,
    Jcxz,
    Jmp,
    Lahf,
    Lds,
    Lea,
    Les,
    Lodsb,
    Lodsw,
    Loop,
    Loope,
    Loopne,
    Loopnz,
    Loopz,
    Mov,
    Movsb,
    Movsw,
    Mul,
    Neg,
    Nop,
    Not,
    Or,
    Out,
    Pause,
    Pop,
    Popf,
    Popfw,
    Push,
    Pushf,
    Pushfw,
    Rcl,
    Rcr,
    Ret,
    Retd,
    Retf,
    Retfd,
    Retfw,
    Retn,
    Retnd,
    Retnw,
    Retw,
    Rol,
    Ror,
    Sahf,
    Sal,
    Salc,
    Sar,
    Sbb,
    Scasb,
    Scasw,
    Shl,
    Shr,
    Stc,
    Std,
    Sti,
    Stosb,
    Stosw,
    Sub,
    Test,
    Xchg,
    Xlat,
    Xlatb,
    Xor,
}

pub fn str_to_operation(s: &str) -> Option<Operation> {
    Some(match s.to_lowercase().as_str() {
        "aaa" => Operation::Aaa,
        "aad" => Operation::Aad,
        "aam" => Operation::Aam,
        "aas" => Operation::Aas,
        "adc" => Operation::Adc,
        "add" => Operation::Add,
        "and" => Operation::And,
        "call" => Operation::Call,
        "cbw" => Operation::Cbw,
        "clc" => Operation::Clc,
        "cld" => Operation::Cld,
        "cli" => Operation::Cli,
        "cmc" => Operation::Cmc,
        "cmp" => Operation::Cmp,
        "cmpsb" => Operation::Cmpsb,
        "cmpsw" => Operation::Cmpsw,
        "cwd" => Operation::Cwd,
        "daa" => Operation::Daa,
        "das" => Operation::Das,
        "dec" => Operation::Dec,
        "div" => Operation::Div,
        "fwait" => Operation::Fwait,
        "hlt" => Operation::Hlt,
        "idiv" => Operation::Idiv,
        "imul" => Operation::Imul,
        "in" => Operation::In,
        "inc" => Operation::Inc,
        "int" => Operation::Int,
        "int03" => Operation::Int03,
        "int3" => Operation::Int3,
        "into" => Operation::Into,
        "iret" => Operation::Iret,
        "iretw" => Operation::Iretw,
        "jcxz" => Operation::Jcxz,
        "jmp" => Operation::Jmp,
        "lahf" => Operation::Lahf,
        "lds" => Operation::Lds,
        "lea" => Operation::Lea,
        "les" => Operation::Les,
        "lodsb" => Operation::Lodsb,
        "lodsw" => Operation::Lodsw,
        "loop" => Operation::Loop,
        "loope" => Operation::Loope,
        "loopne" => Operation::Loopne,
        "loopnz" => Operation::Loopnz,
        "loopz" => Operation::Loopz,
        "mov" => Operation::Mov,
        "movsb" => Operation::Movsb,
        "movsw" => Operation::Movsw,
        "mul" => Operation::Mul,
        "neg" => Operation::Neg,
        "nop" => Operation::Nop,
        "not" => Operation::Not,
        "or" => Operation::Or,
        "out" => Operation::Out,
        "pause" => Operation::Pause,
        "pop" => Operation::Pop,
        "popf" => Operation::Popf,
        "popfw" => Operation::Popfw,
        "push" => Operation::Push,
        "pushf" => Operation::Pushf,
        "pushfw" => Operation::Pushfw,
        "rcl" => Operation::Rcl,
        "rcr" => Operation::Rcr,
        "ret" => Operation::Ret,
        "retd" => Operation::Retd,
        "retf" => Operation::Retf,
        "retfd" => Operation::Retfd,
        "retfw" => Operation::Retfw,
        "retn" => Operation::Retn,
        "retnd" => Operation::Retnd,
        "retnw" => Operation::Retnw,
        "retw" => Operation::Retw,
        "rol" => Operation::Rol,
        "ror" => Operation::Ror,
        "sahf" => Operation::Sahf,
        "sal" => Operation::Sal,
        "salc" => Operation::Salc,
        "sar" => Operation::Sar,
        "sbb" => Operation::Sbb,
        "scasb" => Operation::Scasb,
        "scasw" => Operation::Scasw,
        "shl" => Operation::Shl,
        "shr" => Operation::Shr,
        "stc" => Operation::Stc,
        "std" => Operation::Std,
        "sti" => Operation::Sti,
        "stosb" => Operation::Stosb,
        "stosw" => Operation::Stosw,
        "sub" => Operation::Sub,
        "test" => Operation::Test,
        "xchg" => Operation::Xchg,
        "xlat" => Operation::Xlat,
        "xlatb" => Operation::Xlatb,
        "xor" => Operation::Xor,
        _ => return None,
    })
}
